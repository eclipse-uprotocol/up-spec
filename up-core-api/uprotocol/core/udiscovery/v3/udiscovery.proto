/*
 * Copyright (c) 2023 General Motors GTO LLC
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-FileType: SOURCE
 * SPDX-FileCopyrightText: 2023 General Motors GTO LLC
 * SPDX-License-Identifier: Apache-2.0
 */
syntax = "proto3";

package uprotocol.core.udiscovery.v3;
import "google/protobuf/timestamp.proto";
import "uprotocol_options.proto";
import "uri.proto";
import "ustatus.proto";

option java_package = "org.eclipse.uprotocol.core.udiscovery.v3";
option java_outer_classname = "UDiscoveryProto";
option java_multiple_files = true;

// Platform USE Discovery Service Interface
service uDiscovery {
  option (name) = "core.udiscovery"; // Service name
  option (version_major) = 3;
  option (version_minor) = 0;
  option (id) = 1;

  // Used by any uProtocol application or service to find service instances
  // locations. The passed UUri contains valid UEntity, UResource, and UAuthority information
  // for a query.
  // What is returned is a list of UUris that match the query. Possible return values in status are:
  // 1. code.OK: Query lookup was successful
  // 2. code.NOT_FOUND: No matching UUris were found
  // 3. code.INVALID_ARGUMENT: The passed UUri is invalid
  // 4. code.PERMISSION_DENIED: The caller does not have permission to perform the query
  rpc FinduE(FinduERequest) returns (FinduEResponse) {
    option (method_id) = 1;
  }

  // Retrieve the list of topics for a given uE
  rpc GetuETopics(GetuETopicsRequests) returns (GetuETopicsResponse){
    option (method_id) = 2;
  }

  // Retrieve the list of uEs under a device. 
  // Input argument : Valid device URI
  // Output : List of all uEs under that device and appropriate status message
  rpc GetuEList(GetuEListRequest) returns (GetuEListResponse){
    option (method_id) = 4;
  }

  rpc GetDeviceList(GetDeviceListRequest) returns (GetDeviceListResponse){
    option (method_id) = 5;
  }


  // Resolve a UUri filling in the missing names/numbers from the Discovery database.
  // If the resolution was successful, the resolved UUri containing names and numbers
  // is returned along with the following status.code values:
  // - code.OK: Resolution was successfull
  // - code.NOT_FOUND: Unable to find the missing names or numbers for the passed UUri
  // - code.INVALID_ARGUMENT: The passed UUri is invalid (missing names or numbers)
  // - code.PERMISSION_DENIED: The caller does not have permission to perform the resolution
  rpc ResolveUri(ResolveUriRequest) returns (ResolveUriResponse) {
    option (method_id) = 10;
  }
}


message FinduERequest {
  string uri = 1;
}

// Return value from FinduE() API that contains the batch of Uris for the 
// lookup and status from the API call
message FinduEResponse {
  v1.UUriBatch uris = 1;           // Batch of Uris
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}



message GetuETopicsRequest {
  v1.UUri UE = 1;
}


// Response data for GetUEtopics. 
// Possible return values in status are:
// 1. code.OK: Query lookup was successful
// 2. code.NOT_FOUND: No matching UUris were found
// 3. code.INVALID_ARGUMENT: The passed UUri is invalid
message GetuETopicsResponse {

  repeated v1.UUri topicList = 1;
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}

message GetUEListRequest{

  v1.UUri UDevice = 1;
}

// Response data for GetUEtopics. 
// Possible return values in status are:
// 1. code.OK: Query lookup was successful
// 2. code.NOT_FOUND: No matching UUris were found
// 3. code.INVALID_ARGUMENT: The passed UUri is invalid
message GetuEListResponse {

  repeated v1.UUri UEList = 1;
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}


message GetDeviceListRequest{

  v1.UUri UDomain = 1;
}

// Response data for GetUEtopics. 
// Possible return values in status are:
// 1. code.OK: Query lookup was successful
// 2. code.NOT_FOUND: No matching UUris were found
// 3. code.INVALID_ARGUMENT: The passed UUri is invalid
message GetuEListResponse {

  repeated v1.UUri deviceList = 1;
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}


// Request message passed to ResolveUri() API to resolve the missing names or numbers.
message ResolveUriRequest {
  // The URI to resolve containing only names or numbers
  v1.UUri uri = 1;
}


// Response returned from ResolveUri() API containing a UUri and the 
// status of the resolution.
message ResolveUriResponse {
  v1.UUri uri = 1;                 // Resolved UUri  
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}

