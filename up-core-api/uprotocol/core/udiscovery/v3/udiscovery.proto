/*
 * Copyright (c) 2023 General Motors GTO LLC
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-FileType: SOURCE
 * SPDX-FileCopyrightText: 2023 General Motors GTO LLC
 * SPDX-License-Identifier: Apache-2.0
 */
syntax = "proto3";

package uprotocol.core.udiscovery.v3;
import "google/protobuf/timestamp.proto";
import "uprotocol_options.proto";
import "uri.proto";
import "ustatus.proto";

option java_package = "org.eclipse.uprotocol.core.udiscovery.v3";
option java_outer_classname = "UDiscoveryProto";
option java_multiple_files = true;

// Platform USE Discovery Service Interface
service uDiscovery {
  option (name) = "core.udiscovery"; // Service name
  option (version_major) = 3;
  option (version_minor) = 0;
  option (id) = 1;


  option (notification_topic) = {
    id: 0x8000,
      name: "NodeChange",
      message: "Notification"
  };

  /************************** Write APIs ************************************/

  /* 
  UEs shall call RegisterUE API to add themselves to discovery.
 */

  /* Example: 
  RegisterUE(“//ultifi.gm.com/core.example/2.0")
  Response: Status: code.OK
 */

  rpc RegisterUE(RegisterUERequest) returns ( uprotocol.v1.UStatus){
    option (method_id) = 1;
  }

    /* 
  UEs shall call UnregisterUE API to remove themselves from discovery.
 */

  /* Example: 
  UnregisterUE(“//ultifi.gm.com/core.example/2.0")
  Response: Status: code.OK
 */

 rpc UnregisterUE(UnregisterUERequest) returns ( uprotocol.v1.UStatus){
  option (method_id) = 1;
}


  /* 
  UEs shall call SetUETopics API to update discovery with the list of topics they service.
  This will be used in two scenarios: 
  1. when a UE is added on a device 
  2. when UE wants to udpate the topic list
  uDiscovery shall implement requisite permission model while processing this.
 */

  /* Example: 
  SetUETopics(parentUE:“///device/UE/1”, TopicList:["UE/1/topic1", "UE/1/topic2", "UE/1/rpc1"])
  Response: Status: code.OK

  SetUETopics(parentUE:“///device/UE2/1”, TopicList:["UE/1/topic1", "UE/1/topic2", "UE/1/rpc1"])
  Response: Status: code.PERMISSION_DENIED (cant change other UEs)

  */

  rpc SetUETopics(SetUETopicsRequest) returns ( uprotocol.v1.UStatus){
    option (method_id) = 1;
  }


  /* 
  UEs shall call SetUEProperties API to update discovery with updated property values. 
  For example, this could be used to update an UE's version.
 */

  /* Example: 
  SetUEProperties(parentUE:“///device/UE/1”, PropertyValuesList:["version_major" : "1", "version_minor" : "2"])
  Response: Status: code.OK
  */

  rpc SetUEProperties(SetUEPropertiesRequest) returns (uprotocol.v1.UStatus){
    option (method_id) = 1;
  }

  /******************************* Read APIs ************************/

  /* 
  Consumer shall call FindUE API to find all instances for a given uE and their locations. 
  uDiscovery shall return all local(to the device) URIs for this service and also the ones found 
  in cache of uEs for remote devices. If requested details are not found (either locally or in cache), it shall 
  attempt to fetch those details from next uDiscovery instance in the chain. (uLDS to uDDS, uDDS to uCDS) 
  */

  /* 
  Example: 
  FindUE(“///core.example”)
  Response: [“//ultifi.gm.com/core.example/2.0”, “/core.example/1.0”], Status: code.OK
  */

  rpc FinduE(FinduERequest) returns (FinduEResponse) {
    option (method_id) = 1;
  }

  /* 
  Consumers shall call GetUETopics API to retrieve a list of topics serviced by a given uE.
  List of topics shall consist data topics being published and rpc methods services by that uE. 
  Scope of the data fetch shall be limited to local device, meaning uLDS shall not attempt to 
  fetch the details remotely if not found locally or in cache.
  */
    
  /* 
  Example: 
  GetUETopics(“up:/core.example/1”)
  Response: [“up:/core.example/1/topic1”, “up:/core.example/1/rpc1”], Status: code.OK 
  */

  rpc GetuETopics(GetUETopicsRequest) returns (GetUETopicsResponse){
    option (method_id) = 1;
  }

  /* 
  Consumers shall call GetUEList API to fetch the list of uEs under a given device.
  Idea is to provide an API(at each levle in hierarchy) to get a list of local entities.
  For example: uDDS might call on uLDS for each device to build up its local tree in case of failures.
  */

  /* 
  Example: 
  GetUETopics(“up:/device1”)
  Response: [“up:/device1/uE1”, “up:/device1/uE2”], Status: code.OK 

  GetUETopics(“up:/device2”)
  Response: [], Status: code.INVALID_ARGUMENT (passed device should match local device)
  */

  rpc GetuEList(GetUEListRequest) returns (GetUEListResponse){
    option (method_id) = 4;
  }


 /*
  Consumers shall call GetDeviceList API to fetch the list of uEs under a given domain.
  This is an extension of GetUEList at a higher level.
  For example: uCDS might call on uDDS to build up its local tree in case of failures
 */

 /* Example: 
  GetDeviceList(“up:/domain”)
  Response: [“up:/domain/device1”, “up:/domain/device2”], Status: code.OK 

  GetUETopics(“up:/domain2”)
  Response: [], Status: code.INVALID_ARGUMENT (invalid domain)

  */
  rpc GetDeviceList(GetDeviceListRequest) returns (GetDeviceListResponse){
    option (method_id) = 5;
  }

  /******************************* Data replication / synchronization ******/

  /*
    UpdateData is NOT a customer facing API. This shall be used discovery 
    instances to push an update between to core components (streamer)/ other discovery instances.
  */

  /* 
  Example: 
  UpdateData(“up:/domain/device/UE”)
  Status: code.OK 
  */

  rpc SyncData(UpdateDataRequest) returns (uprotocol.v1.UStatus){
    option (method_id) = 6;
  }

}


/* All response messages shall include uprotocol status field. This shall indicate whether 
the request was processed successfully and provide error reason if applicable. Some of the 
common error reasons could be:
  code.OK: Query lookup was successful
  code.NOT_FOUND: No matching UUris were found
  code.INVALID_ARGUMENT: The passed UUri is invalid
  code.PERMISSION_DENIED: The caller does not have permission to perform the query
  */


// Request message to register UE
message RegisterUERequest{
  v1.UUri UE = 1;
}

// Request message to unregister UE
message UnregisterUERequest{
  v1.UUri UE = 1;
}

// request message to Find UE
message FinduERequest {
  string uri = 1;
}

/*
Return value from FinduE() API that contains the batch of Uris for the 
lookup and status from the API call */

message FinduEResponse {
  v1.UUriBatch uris = 1;           // Batch of Uris
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}


// Request message to get list of topics for a UE
message GetUETopicsRequest {
  v1.UUri UE = 1;
}


// Response data for GetUEtopics. 
message GetUETopicsResponse {
  repeated v1.UUri topicList = 1;
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}

// Request message to get list of UEs for a device
message GetUEListRequest{
  v1.UUri UDevice = 1;
}

// Response data for GetUEtopics. 
message GetUEListResponse {
  repeated v1.UUri UEList = 1;
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}

// Request message to get list of UEs for a device
message GetDeviceListRequest{
  v1.UAuthority UDomain = 1;
}

// Request message to get list of devices for a domain
message GetDeviceListResponse {
  repeated v1.UUri deviceList = 1;
  uprotocol.v1.UStatus status = 2; // Return code for the rpc call
}

// Request message to set UE topics
message SetUEPropertiesRequest{
  v1.UUri parentUE = 1;
  map <string, PropertyValue>  propertiesList = 2;

}

// Request message to update Data on remote discovery instances
message UpdateDataRequest{
  v1.UUri parentUE = 1;
  repeated Node node = 2;

}

// Request message to set UE Topics
message SetUETopicsRequest{
  v1.UUri parentUE = 1;
  repeated UServiceTopic topicsList = 2;

}


/*
Typedef for a node properties. A node property can be any one of the ultifi ("u_") types
defined below
*/
message PropertyValue {
  oneof attr {
    bool u_boolean = 1;       // Boolean
    int32 u_integer = 2;      // Integer
    string u_string = 3;      // String
    bytes u_bytes = 4;        // Raw Bytes
    string u_uri = 5;         // A URI
    google.protobuf.Timestamp u_timestamp = 6;  // Timestamp
    double u_double = 7;      // Double
    int64 u_integer_64 = 8;   // 64 bit Integer
  }
}


/*
uProtocol definition of a Node in the hierarchy per SDV-202.
Node can be domain, device, service, resource, method, etc...
*/
message Node {
  // Ultifi URI pointing to this node
  v1.UUri uri = 1;

  // List of child nodes under this node
  repeated Node nodes = 2;

  // List of node properties
  map <string, PropertyValue>  properties = 3;

  // The node type
  Type type = 4;


  /*
  What is the uThing (stored in Node) type. This is used to more easily
  identify the Node rather than parsing from uri and inferring the type
  */
  enum Type {
    UNSPECIFIED  = 0; // Unspecified node type
    DOMAIN = 1;       // uDomain
    DEVICE = 2;       // uDevice
    ENTITY = 3;       // uEntity (uE)
    VERSION = 9;      // uEntity version
    TOPIC = 4;        // uE Topic
    METHOD = 5;       // uE Method
    MESSAGE = 6;      // uE Message
    RESOURCE = 7;     // uE Resource
    USER = 8;         // User Information
  }
}

