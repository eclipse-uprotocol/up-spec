/*
 * Copyright (c) 2023 General Motors GTO LLC
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-FileType: SOURCE
 * SPDX-FileCopyrightText: 2023 General Motors GTO LLC
 * SPDX-License-Identifier: Apache-2.0
 */
syntax = "proto3";

package uprotocol.v1;

option java_package = "org.eclipse.uprotocol.v1";
option java_outer_classname = "UUriProto";
option java_multiple_files = true;


// Data representation of uProtocol <b>URI</b>.
// This class will be used to represent the source and sink (destination) parts
// of the Packet, for example in a CloudEvent Packet. <br>
// UUri is used as a method to uniquely identify devices, services, and resources
// on the  network.<br>
// Where software is deployed, what the service is called along with a version and
// the resources in the service. Defining a common URI for the system allows
// applications and/or services to publish and discover each other.<br>
message UUri {
  // Authority of the URI (ex. device name, address, id), if not present, UUri is local
  UAuthority authority = 1;

  // Software Entity information (ex. name, version, id)
  UEntity entity = 2;

  // Service Resource information (methods, topics, etc..)
  UResource resource = 3;
}


// An Authority represents the deployment location of a specific Software Entity.
// Authority can be represented in either a name (i.e example.com), ip address (205.236.147.1)
// or an ID (i.e. VIN, SHA 128, or any other identifier that is less than 255 bytes.
message UAuthority {
  string name = 1; // Domain & device name as a string
}


// Data representation of an <b> Software Entity - uE</b><br>
// Software entities are distinguished by using a unique name
// along with the specific version of the software.
// An Software Entity is a piece of software deployed somewhere on a uDevice.<br>
// The Software Entity is used in the source and sink parts of communicating software.<br>
// A uE that publishes events is a <b>Service</b> role.<br>
// A uE that consumes events is an <b>Application</b> role.
message UEntity {
  string name = 1;          // Name of the entity
  uint32 version_major = 3; // optional major version of the uEntity
  uint32 version_minor = 4; // optional minor version of the uEntity
}


// A service API - defined in the {@link UEntity} - has Resources and Methods.
// Both of these are represented by the UResource message.
// Resources are unique when prepended with UAuthority that represents the device and
// UEntity that represents the service.
message UResource {
  uint32 id = 1;        // Numerical representation of the UResource portion of the UUri
}


// Repeated list of URIs that can be used for batching APIs
message UUriBatch {
  repeated UUri uris = 1; // Repeated list of URIs
}
