/*
 * Copyright (c) 2023 General Motors GTO LLC
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-FileType: SOURCE
 * SPDX-FileCopyrightText: 2023 General Motors GTO LLC
 * SPDX-License-Identifier: Apache-2.0
 */
 syntax = "proto3";

 package uprotocol.v1;

 import "uri.proto";
 import "uuid.proto";
 import "ustatus.proto";
 import "uprotocol_options.proto";

 option java_package = "org.eclipse.uprotocol.v1";
 option java_outer_classname = "UAttributesProto";
 option java_multiple_files = true;

// Metadata describing a particular message's purpose, content and processing requirements.
// Each type of message is described by a set of mandatory and optional attributes.
message UAttributes {
    // A unique message identifier as defined by https://github.com/eclipse-uprotocol/uprotocol-spec/blob/main/basics/uuid.adoc[uProtocol UUID].
    // The timestamp contained in the UUID indicates the message's creation time.
    UUID id = 1;

    // This message's type which also indicates its purpose and determines contraints on the other properties.
    UMessageType type = 2;

    // The origin (address) of this message.
    //
    // Publish messages MUST have this property set to a URI representing the topic that this message is published to.
    // Notification messages MUST have this property set to a URI representing the component that this notification originates from.
    // RPC Request messages MUST have this property set to the URI that the service consumer expects to receive the response message at.
    // RPC Response messages MUST have this property set to a URI identifying the method that has been invoked and which this message is the outcome of.
    UUri source = 3;

    // The destination (address) of this message.
    //
    // Publish messages MUST NOT have this property set to any value.
    // Notification messages MUST have this property set to a URI representing the receiver of this notification.
    // RPC Request messages MUST have this property set to a URI identifying the service provider's method to invoke.
    // RPC Response messages MUST have this property set to the URI that the service consumer expects to receive this response message at.
    UUri sink = 4;

    // The QoS level that this message should be processed/delivered with. If not specified explicitly, the
    // https://github.com/eclipse-uprotocol/uprotocol-spec/blob/main/basics/qos.adoc#default-priority[default priority level] is assumed.
    //
    // RPC Request messages MUST have this property set to a value of `UPRIORITY_CS4` or higher.
    // RPC Response messages MUST have this property set to the same value as that of the corresponding RPC Request message.
    UPriority priority = 5;

    // The amount of time (in milliseconds) after which this message MUST NOT be delivered/processed anymore.
    // A message MUST be considered expired, if this attribute is set to a positive value and
    // \$t_{current} > t_{id} + ttl\$
    //
    // RPC Request messages MUST have this property set to a value > 0.
    optional uint32 ttl = 6;
    
    // The service consumer's permission level as defined in
    // https://github.com/eclipse-uprotocol/uprotocol-spec/blob/main/basics/permissions.adoc[Permissions].
    //
    // Publish, Notification and RPC Response messages MUST NOT have this property set to any value.
    optional uint32 permission_level = 7;

    // A https://github.com/eclipse-uprotocol/up-core-api/blob/main/uprotocol/ustatus.proto[code] indicating an error that has occurred
    // during the delivery of either an RPC Request or Response message.
    // A value of `0` or no value indicates that there was no communication error.
    //
    // Publish, Notification and RPC Request messages MUST NOT have this property set to any value.
    optional UCode commstatus = 8;

    // The identifier that a service consumer can use to correlate an RPC Repsonse message with its RPC Request.
    //
    // RPC Response messages MUST have this property set to the value of the `id` property of the request message
    // that this is the response to.
    // Publish, Notification and RPC Request messages MUST NOT have this property set to any value.
    UUID reqid = 9;

    // The service consumer's access token as defined in
    // https://github.com/eclipse-uprotocol/uprotocol-spec/blob/main/basics/permissions.adoc[Permissions].
    //
    // Publish, Notification and RPC Response messages MUST NOT have this property set to any value.
    optional string token = 10;

    // A tracing identifier to be used for correlating messages across the system.
    optional string traceparent = 11;
}


// A subset of UAttributes used for RPC method invocation.
message CallOptions {
    // The QoS level that this request should be processed/delivered with.
    //
    // MUST be set to a value of `UPRIORITY_CS4` or higher.
    UPriority priority = 1;

    // The amount of time (in milliseconds) after which this request MUST NOT be delivered/processed anymore.
    // A request MUST be considered expired, if this attribute is set to a positive value and
    // \$t_{current} > t_{id} + ttl\$
    //
    // MUST be set to a value > 0.
    uint32 ttl = 2;
    
    // The service consumer's access token as defined in
    // https://github.com/eclipse-uprotocol/uprotocol-spec/blob/main/basics/permissions.adoc[Permissions].
    optional string token = 3;
}


// uProtocol defines different types of messages.
// Using the message type, validation can be performed to ensure transport
// validity of the data in the {@link UAttributes}.
enum UMessageType {
    // Unspecified message type
    UMESSAGE_TYPE_UNSPECIFIED = 0;
    
    // Publish
    // A message that is used to notify all interested consumers of an event that has occurred.
    UMESSAGE_TYPE_PUBLISH = 1 [(uprotocol.ce_name) = "pub.v1"];
    
    // RPC Request
    // A message that is used by a service consumer to invoke one of a service provider's methods with some input data, expecting the service
    // provider to reply with a response message.
    UMESSAGE_TYPE_REQUEST = 2 [(uprotocol.ce_name) = "req.v1"];
    
    // RPC Response
    // A message that is used by a service provider to send the outcome of processing a request message
    // from a servcice consumer.
    UMESSAGE_TYPE_RESPONSE = 3 [(uprotocol.ce_name) = "res.v1"];

    // Notification
    // A message that is used to inform a specific consumer about an event that has occurred.
    UMESSAGE_TYPE_NOTIFICATION = 4 [(uprotocol.ce_name) = "not.v1"];
}


// uProtocol Priority as defined in 
// https://github.com/eclipse-uprotocol/uprotocol-spec/blob/main/basics/qos.adoc[uProtocol Prioritization]
enum UPriority {
    // Unspecified priority
    UPRIORITY_UNSPECIFIED = 0;

    // Low Priority. No bandwidth assurance such as File Transfer.
    UPRIORITY_CS0 = 1 [(uprotocol.ce_name) = "CS0"];

    // Standard, undifferentiated application such as General (unclassified).
    UPRIORITY_CS1 = 2 [(uprotocol.ce_name) = "CS1"];

    // Operations, Administration, and Management such as Streamer messages (sub, connect, etcâ€¦)
    UPRIORITY_CS2 = 3 [(uprotocol.ce_name) = "CS2"];

    // Multimedia streaming such as Video Streaming
    UPRIORITY_CS3 = 4 [(uprotocol.ce_name) = "CS3"];

    // Real-time interactive such as High priority (rpc events)
    UPRIORITY_CS4 = 5 [(uprotocol.ce_name) = "CS4"];

    // Signaling such as Important
    UPRIORITY_CS5 = 6 [(uprotocol.ce_name) = "CS5"];

    // Network control such as Safety Critical
    UPRIORITY_CS6 = 7 [(uprotocol.ce_name) = "CS6"];
}
